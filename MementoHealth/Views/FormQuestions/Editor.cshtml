@model MementoHealth.Entities.FormQuestion

@{
    string action = ViewContext.RouteData.Values["action"].ToString();
    ViewBag.Title = action + " Form Question";
}

<h2>@ViewBag.Title</h2>
<hr />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.ValidationMessageFor(model => model.Question, "", new { @class = "text-danger" })
    @Html.ValidationMessageFor(model => model.IsRequired, "", new { @class = "text-danger" })
    @Html.ValidationMessageFor(model => model.JsonData, "", new { @class = "text-danger" })

    <div>
        @Html.HiddenFor(model => model.FormId)
        @Html.HiddenFor(model => model.QuestionId)
        @Html.HiddenFor(model => model.JsonData)

        @Html.LabelFor(m => m.Question)
        @Html.TextBoxFor(m => m.Question)
        <br />

        @Html.LabelFor(m => m.IsRequired)
        @Html.CheckBoxFor(m => m.IsRequired)
        <br />

        @Html.LabelFor(m => m.Question)
        @Html.DropDownList(nameof(Model.TypeString),
            new SelectList(Enum.GetNames(typeof(QuestionType))
                .Select(x => new { Value = x, Text = x }),
                    "Value",
                    "Text"
            ),
            new { onchange = "answerTypeSelected()" }
        )
        <br />

        <div id="multi-editor" class="custom-editor" style="display:none">
            <div>Labels:</div>
            <div id="multi-labels"></div>
            <input type="button" name="add" value="Add" onclick="addMultiLabel()" />
            <input type="button" name="add" value="Remove last" onclick="removeLastMultiLabel()" />
            <br />
        </div>

        <div id="image-editor" class="custom-editor" style="display:none">
            <div>Image:</div>
            <input id="img-selector" type="file" name="file" accept="image/*" onchange="imageSelected(event)" />
            <br />
            <img id="selected-image" width="300px" />
            <br />
        </div>

        <button type="button" id="create-button" class="btn btn-primary" onclick="return createClicked();">@action</button>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index", new { id = Model.FormId })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(() => {
            let jsonString = $('#@Html.IdFor(m => m.JsonData)').val();
            if (jsonString.length > 0) {
                let jsonData = JSON.parse(jsonString);
                let selectedType = $('#@Html.IdFor(m => m.TypeString)').val();
                switch (selectedType) {
                    case '@QuestionType.Checkboxes.ToString()':
                    case '@QuestionType.Radiobuttons.ToString()':
                        $("#multi-editor").show();
                        jsonData.Labels.forEach(label => addMultiLabel(label));
                        break;
                    case '@QuestionType.Image.ToString()':
                        $("#image-editor").show();
                        $("#selected-image").attr("src", jsonData.ImageBase64);
                        break;
                }
            }
        })

        let addMultiLabel = (val = "") => {
            let newElement = `<input type='text' name='' value='${val}' />`
            $("#multi-labels").append(newElement);
        };

        let removeLastMultiLabel = () => {
            if ($("#multi-labels").children().length > 1)
                $("#multi-labels").children().last().remove();
        };

        let imageSelected = async (event) => {
            if (event.target.files[0].size > 5242880) {
                alert("File is too big. Max allowed size is 5 MBs");
                this.value = "";
            } else {
                let file = $('#img-selector').prop('files')[0];
                $("#selected-image").attr("src", await fileToBase64(file));
            }
        };

        let answerTypeSelected = () => {
            $(".custom-editor").hide();
            let selectedType = $('#@Html.IdFor(m => m.TypeString)').val();
            switch (selectedType) {
                case '@QuestionType.Checkboxes.ToString()':
                case '@QuestionType.Radiobuttons.ToString()':
                    $("#multi-editor").show();
                    if ($("#multi-labels").children().length == 0)
                        addMultiLabel();
                    break;
                case '@QuestionType.Image.ToString()':
                    $("#image-editor").show();
                    break;
            }
        };

        let fileToBase64 = async (file) => {
            let result_base64 = await new Promise((resolve) => {
                let fileReader = new FileReader();
                fileReader.onload = () => resolve(fileReader.result);
                fileReader.readAsDataURL(file);
            });
            return result_base64;
        };

        let createClicked = () => {
            let jsonData = {};
            let isValidForm = true;

            switch ($('#@Html.IdFor(m => m.TypeString)').val()) {
                case '@QuestionType.Checkboxes.ToString()':
                case '@QuestionType.Radiobuttons.ToString()':
                    let labels = [];
                    $("#multi-labels").children().each(function () {
                        let label = $(this).val();
                        if (label.length == 0) {
                            alert("Label text cannot be empty.");
                            isValidForm = false;
                        } else
                            labels.push(label);
                    });
                    jsonData.Labels = labels;
                    break;
                case '@QuestionType.Image.ToString()':
                    let imageBase64 = $("#selected-image").attr("src");
                    if (!imageBase64) {
                        alert("Please select an image first.");
                        isValidForm = false;
                    } else
                        jsonData.ImageBase64 = imageBase64;
                    break;
            }
            if (isValidForm) {
                $('#@Html.IdFor(m => m.JsonData)').val(jQuery.isEmptyObject(jsonData) ? "" : JSON.stringify(jsonData));
                $('#create-button').closest("form").submit();
            }
        };
    </script>
}
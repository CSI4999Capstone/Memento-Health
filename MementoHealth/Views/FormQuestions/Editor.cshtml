@model MementoHealth.Entities.FormQuestion

@{
    string action = ViewContext.RouteData.Values["action"].ToString();
    ViewBag.Title = action + " Form Question";
    int numberOfConditions = Model.Conditions?.Count ?? 0;
}

<div class="row d-flex justify-content-center">
    <div class="shadow bg-light text-center" style="border-radius: 12px">
        <div class="page-title h2 font-weight-bold" style="padding-top: 25px;">@ViewBag.Title</div>
        <div class="custom-form-div" style="margin-top: -50px; padding-bottom: 0px">

            <div class="row">
                <div class="col-md-auto">
                    <section>
                        @using (Html.BeginForm())
                        {
                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            @Html.ValidationMessageFor(model => model.Question, "", new { @class = "text-danger" })
                            @Html.ValidationMessageFor(model => model.IsRequired, "", new { @class = "text-danger" })
                            @Html.ValidationMessageFor(model => model.JsonData, "", new { @class = "text-danger" })

                            @Html.HiddenFor(model => model.FormId)
                            @Html.HiddenFor(model => model.QuestionId)
                            @Html.HiddenFor(model => model.JsonData)

                            <div class="form-group">
                                <div class="col-md-auto" style="text-align: left; padding: 0 0 0 0">
                                    @Html.LabelFor(m => m.Question, new { @class = "control-label col-md-auto" })
                                </div>
                                <div class="col-md-auto">
                                    @Html.TextBoxFor(m => m.Question, new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="form-check">
                                <div class="col-md-auto my-3" style="text-align: left">
                                    @Html.CheckBoxFor(m => m.IsRequired, new { @class = "form-check-input col-md-auto" })


                                    @Html.LabelFor(m => m.IsRequired, new { @class = "form-check-label" })
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-auto" style="text-align: left; padding: 0 0 0 0">
                                    @Html.LabelFor(m => m.TypeString, new { @class = "control-label col-md-auto" })
                                </div>
                                <div class="col-md-auto">
                                    @Html.DropDownList(nameof(Model.TypeString),
                                        new SelectList(Enum.GetNames(typeof(QuestionType))
                                            .Select(x => new { Value = x, Text = x }),
                                                "Value",
                                                "Text"
                                    ),
    new { onchange = "answerTypeSelected()", @class = "form-control mb-3" }
)
                                </div>
                            </div>
                            <div id="multi-editor" class="custom-editor mb-3" style="display:none">
                                <div class="mb-2">Labels</div>
                                <input class="btn btn-sm btn-outline-success" type="button" id="add-label-btn" value="Add label" onclick="addMultiLabel()" />
                                <input class="btn btn-sm btn-outline-danger" type="button" id="remove-label-btn" style="display:none" value="Remove last" onclick="removeLastMultiLabel()" />
                                <div id="multi-labels"></div>
                            </div>

                            <div id="image-editor" class="custom-editor mb-3" style="display:none">
                                <label for="file" class="mb-2">Image</label>
                                <input id="img-selector" class="form-control-file" type="file" name="file" accept="image/*" onchange="imageSelected(event)" />
                                <img id="selected-image" width="300px" />
                            </div>

                            <div class="form-group">
                                <div class="col-md-auto my-4" style="text-align: center; padding-top: 5px">
                                    <button type="button" id="create-button" class="btn btn-primary w-100" onclick="return createClicked();">@action</button>
                                </div>
                            </div>
                            <p>
                                @Html.ActionLink("Back to Question List", "Index", new { id = Model.FormId })
                            </p>
                        }
                    </section>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(() => {
            let jsonString = $('#@Html.IdFor(m => m.JsonData)').val();
            if (jsonString.length > 0) {
                let jsonData = JSON.parse(jsonString);
                let selectedType = $('#@Html.IdFor(m => m.TypeString)').val();
                switch (selectedType) {
                    case '@QuestionType.Checkboxes.ToString()':
                    case '@QuestionType.Radiobuttons.ToString()':
                        $("#multi-editor").show();
                        jsonData.labels.forEach(label => addMultiLabel(label));
                        break;
                    case '@QuestionType.Image.ToString()':
                        $("#image-editor").show();
                        $("#selected-image").attr("src", jsonData.image.url);
                        break;
                }
            }
        })

        let addMultiLabel = (val = "") => {
            let newElement = `<input type='text' class='form-control mt-1' value='${val}' />`
            $("#multi-labels").append(newElement);
            if ($("#multi-labels").children().length > 1)
                $("#remove-label-btn").show();
        };

        let removeLastMultiLabel = () => {
            if ($("#multi-labels").children().length > 1)
                $("#multi-labels").children().last().remove();
            if ($("#multi-labels").children().length == 1)
                $("#remove-label-btn").hide();
        };

        let imageSelected = async (event) => {
            if (event.target.files[0].size > 5242880) {
                alert("File is too big. Max allowed size is 5 MBs");
                this.value = "";
            } else {
                let file = $('#img-selector').prop('files')[0];
                $("#selected-image").attr("src", await fileToUrl(file));
            }
        };

        let answerTypeSelected = () => {
            $(".custom-editor").hide();
            let selectedType = $('#@Html.IdFor(m => m.TypeString)').val();
            switch (selectedType) {
                case '@QuestionType.Checkboxes.ToString()':
                case '@QuestionType.Radiobuttons.ToString()':
                    $("#multi-editor").show();
                    if ($("#multi-labels").children().length == 0)
                        addMultiLabel();
                    break;
                case '@QuestionType.Image.ToString()':
                    $("#image-editor").show();
                    break;
            }
        };

        let fileToUrl = async (file) => {
            let result_base64 = await new Promise((resolve) => {
                let fileReader = new FileReader();
                fileReader.onload = () => resolve(fileReader.result);
                fileReader.readAsDataURL(file);
            });
            return result_base64;
        };

        let imageSize = (url) => {
            const img = document.createElement("img");
            const promise = new Promise((resolve, reject) => {
                img.onload = () => {
                    const width = img.naturalWidth;
                    const height = img.naturalHeight;
                    resolve({ width, height });
                };
                img.onerror = reject;
            });
            img.src = url;
            return promise;
        }

        let createClicked = async () => {
            let jsonData = {};
            let isValidForm = true;

            switch ($('#@Html.IdFor(m => m.TypeString)').val()) {
                case '@QuestionType.Checkboxes.ToString()':
                case '@QuestionType.Radiobuttons.ToString()':
                    let labels = [];
                    $("#multi-labels").children().each(function () {
                        let label = $(this).val();
                        if (label.length == 0) {
                            alert("Label text cannot be empty.");
                            isValidForm = false;
                        } else
                            labels.push(label);
                    });
                    jsonData.labels = labels;
                    break;
                case '@QuestionType.Image.ToString()':
                    let imageUrl = $("#selected-image").attr("src");
                    if (!imageUrl) {
                        alert("Please select an image first.");
                        isValidForm = false;
                    } else {
                        jsonData.image = {};
                        jsonData.image.url = imageUrl;

                        const imageDimensions = await imageSize(imageUrl);
                        jsonData.image.width = imageDimensions.width;
                        jsonData.image.height = imageDimensions.height;
                    }
                    break;
            }
            if (isValidForm) {
                $('#@Html.IdFor(m => m.JsonData)').val(jQuery.isEmptyObject(jsonData) ? "" : JSON.stringify(jsonData));
                $('#create-button').closest("form").submit();
            }
        };
    </script>
}
@using MementoHealth.Entities
@model IEnumerable<FormQuestion>
@{
    Form form = Model.First().Form;
    bool editsAllowed = !form.Submissions.Any() && User.IsInRole(Role.ProviderAdmin);
    ViewBag.Title = $"“{form.Name}” Form Questions";
}

<div class="box" style="text-align: center">
    <div class="page-title font-weight-bold h2">@ViewBag.Title</div>
    @if (!editsAllowed)
    {
        <h4 class="text-info">Edits are not allowed as the form already has some submissions.</h4>
    }
    <div style="margin-top:-20px; margin-bottom: 20px">@Html.ActionLink("Back to Forms", "Index", "Forms")</div>
</div>

<div class="container" style="overflow-y: auto; white-space: nowrap; min-width: 94.5%; text-align: center">
    <div class="card shadow">
        <div class="table-responsive">
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Question</th>
                        <th>Is Required</th>
                        <th>Answer Type</th>
                        <th>Data</th>
                        <th>Conditions</th>
                        @if (editsAllowed)
                        {
                            <th>Actions</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (FormQuestion question in Model)
                    {
                    <tr>
                        <td>@question.Number</td>
                        <td>@question.Question</td>
                        <td>@question.IsRequired</td>
                        <td>@question.TypeString</td>
                        <td class="json-data" data-type="@question.TypeString" data-json="@question.JsonData"></td>
                        <td>
                            @if (question.Conditions.Count == 0)
                            {
                                if (editsAllowed)
                                {
                                    <text>
                                        @Html.ActionLink("Add condition", "Add", "FormQuestionConditions", new { id = question.QuestionId }, null)
                                    </text>
                                }
                            }
                            else if (question.Conditions.Count > 0)
                            {
                                if (question.Conditions.Count == 1)
                                {
                                    <div>@question.Conditions.Single()</div>
                                }
                                else
                                {
                                    <ol class="pl-3 mb-0">
                                        @foreach (var condition in question.Conditions)
                                        {
                                            <li>@condition</li>
                                        }
                                    </ol>
                                }
                                if (editsAllowed)
                                {
                                    <text>
                                        @Html.ActionLink("Edit conditions", "Index", "FormQuestionConditions", new { id = question.QuestionId }, null)
                                    </text>
                                }
                            }
                        </td>
                        @if (editsAllowed)
                        {
                            <td>
                                @if (question.CanBeMovedUp)
                                {
                                    using (Html.BeginForm("MoveUp", "FormQuestions", new { id = question.QuestionId }, FormMethod.Post))
                                    {
                                        @Html.AntiForgeryToken()
                                        <a href="#" onclick="this.closest('form').submit();return false;">Up</a>
                                    }
                                }
                                else
                                {
                                    <span class="text-secondary" title="@question.GetCannotMoveUpReason()">Up</span>
                                } |

                                @if (question.CanBeMovedDown)
                                {
                                    using (Html.BeginForm("MoveDown", "FormQuestions", new { id = question.QuestionId }, FormMethod.Post))
                                    {
                                        @Html.AntiForgeryToken()
                                        <a href="#" onclick="this.closest('form').submit();return false;">Down</a>
                                    }
                                }
                                else
                                {
                                    <span class="text-secondary" title="@question.GetCannotMoveDownReason()">Down</span>
                                } |

                                @Html.ActionLink("Insert after", "Insert", new { id = question.QuestionId }) |
                                @Html.ActionLink("Edit question", "Edit", new { id = question.QuestionId }) |
                                @Html.ActionLink("Delete", "Delete", new { id = question.QuestionId })
                            </td>
                        }
                    </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="text-center">
    <div id="canvas" class="w-100 pl-5 pr-5 pt-5"></div>
    <button id="redraw" onclick="redraw();" class="btn btn-sm btn-outline-info">Redraw graph</button>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/Custom/FormQuestionDataConverter.js")
    @Scripts.Render("~/Scripts/raphael.min.js")
    @Scripts.Render("~/Scripts/dracula.min.js")

    <script>
        window.onload = function () {
            redrawGraph();
        };

        let redrawGraph = () => {
            let g = new Graph();
            @foreach (FormQuestion question in Model)
            {
                int charLimit = 30;
                string questionStr = question.Question.Truncate(charLimit);
                <text>g.addNode('@questionStr');</text>
                foreach (var edge in question.GraphEdges)
                {
                    string toQuestionStr = edge.Question?.Question.Truncate(charLimit) ?? "End";
                    string label = "";

                    if (edge.Condition == null)
                    {
                        label = question.Conditions.Count == 0 ? "Next" : "Else";
                    }
                    else
                    {
                        if (question.Conditions.Count > 1)
                        {
                            label += edge.Condition.Number + ". ";
                        }
                        label += edge.Condition.ToString(justCondition: true);
                    }

                    <text>
                        g.addEdge('@questionStr', '@toQuestionStr', { directed: true, label: decodeHtml('@label') });
                    </text>
                }
            }

            /* layout the graph using the Spring layout implementation */
            var layouter = new Graph.Layout.Spring(g);
            layouter.layout();

            /* draw the graph using the RaphaelJS draw implementation */
            $('#canvas').empty();
            var width = $('#canvas').width() - 20;
            var renderer = new Graph.Renderer.Raphael('canvas', g, width, 500);
            renderer.draw();

            redraw = function () {
                layouter.layout();
                renderer.draw();
            };
        }

        let doit;
        window.onresize = () => {
            clearTimeout(doit);
            doit = setTimeout(redrawGraph, 100);
        };

        let decodeHtml = (html) => {
            var txt = document.createElement("textarea");
            txt.innerHTML = html;
            return txt.value;
        }
    </script>
}

@section styles {
    <style>
        form {
            display: inline-block;
        }
    </style>
}

@model MementoHealth.Entities.FormQuestionCondition

@{
    string action = ViewContext.RouteData.Values["action"].ToString();
    ViewBag.Title = action + " Question Condition";
}


<div class="row d-flex justify-content-center">
    <div class="shadow bg-light text-left" style="border-radius: 12px">
        <div class="h2 text-center font-weight-bold" style="padding-top: 25px;">@ViewBag.Title</div>
        <div class="h4 text-secondary text-center">Question @Model.Question.Number: "@Model.Question.Question"</div><hr />
        <div class="custom-form-div" style="padding-bottom: 0px; min-width: 300px">

            <div class="row justify-content-center">
                <div class="col-md-auto">
                    <section>
                        @using (Html.BeginForm())
                        {
                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            @Html.ValidationMessageFor(model => model.JsonData, "", new { @class = "text-danger" })

                            @Html.HiddenFor(model => model.QuestionId)
                            @Html.HiddenFor(model => model.GoToQuestionId)
                            @Html.HiddenFor(model => model.ConditionId)
                            @Html.HiddenFor(model => model.JsonData)
                            @Html.Hidden("QuestionJsonData", Model.Question.JsonData)

                            <div class="form-group">
                                <div class="col-md-auto" style="text-align: left">If Answer</div>
                                <div class="col-md-auto">
                                    <select class="form-control" id="options" onclick="optionSelected()"></select>
                                    <div id="inputs" style="display:none; padding-top: 10px">
                                        <input class="form-control" id="textbox">
                                        <select class="form-control" id="radiobuttons"></select>
                                        <div class="form-check" id="checkboxes"></div>
                                        <img id="image" class="img-fluid" />
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-auto" style="text-align: left">Go To</div>
                                <div class="col-md-auto">
                                    <select class="form-control" id="goto">
                                        <option value="0">end of form</option>
                                        @foreach (var question in Model.Question.Form.Questions
                                            .Where(q => q.Number > Model.Question.Number).OrderBy(q => q.Number).ToList())
                                        {
                                            <option value="@question.QuestionId">Q@(question.Number): @question.Question</option>
                                        }
                                    </select>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-auto my-4" style="text-align: center; padding-top: 5px">
                                    <button type="button" id="create-button" class="btn btn-primary w-100" onclick="submitClicked()">@action</button>
                                </div>
                            </div>
                            <p class="text-center">
                                <a href="@Url.Action("Index", new { id = Model.QuestionId })"><i class="fa fa-chevron-circle-left"></i> Back to Condition List</a>
                            </p>
                        }
                    </section>
                </div>
            </div>
        </div>
    </div>
</div>

@section styles
{
    <link rel="stylesheet" href="~/Content/jquery.selectareas.css">
}

@section Scripts {
    @Scripts.Render("~/Scripts/jquery.selectareas.min.js")
    <script>
        let answerType = '@Model.Question.TypeString';
        let questionData;
        $(() => {
            let options = ['is anything'];

            $("#inputs").children().hide();
            if ($("#QuestionJsonData").val().length > 0)
                questionData = JSON.parse($("#QuestionJsonData").val());

            switch (answerType) {
                case '@QuestionType.Text.ToString()':
                    options.push('is', 'is not', 'has', 'does not have');
                    $("#textbox").attr('type', 'text').show();
                    break;
                case '@QuestionType.Number.ToString()':
                    options.push(
                        'equals',
                        'does not equal',
                        'is less than',
                        'is not less than',
                        'is greater than',
                        'is not greater than'
                    );
                    $("#textbox").attr('type', 'number').val(0).show();
                    break;
                case '@QuestionType.Date.ToString()':
                    options.push(
                        'is on',
                        'is not on',
                        'is before',
                        'is not before',
                        'is after',
                        'is not after'
                    );
                    $("#textbox").attr('type', 'date').val(new Date().toISOString().split('T')[0]).show();
                    break;
                case '@QuestionType.Checkboxes.ToString()':
                    options.push('consists of', 'does not consist of');
                    $('#checkboxes').show();
                    $.each(questionData.labels, function (i, label) {
                        $('#checkboxes').append(
                            $('<input>').prop({
                                type: 'checkbox',
                                id: 'checkbox-' + i,
                                class: 'form-check-input',
                                value: label
                            })).append(
                            $('<label>').prop({
                                for: 'checkbox-' + i,
                                class: 'form-check-label'
                            }).html(" " + label)
                            ).append($('<br>'));
                    });
                    break;
                case '@QuestionType.Radiobuttons.ToString()':
                    options.push('is', 'is not');
                    $('#radiobuttons').show();
                    $.each(questionData.labels, function (i, label) {
                        $('#radiobuttons').append($('<option>', {
                            value: label,
                            text: label
                        }));
                    });
                    break;
                case '@QuestionType.Image.ToString()':
                    options.push('is in', 'is not in');
                    $('#image').show().attr('src', questionData.image.url);
                    break;
            }

            $.each(options, function (i, option) {
                $('#options').append($('<option>', {
                    value: option,
                    text: option
                }));
            });

            let jsonString = $('#@Html.IdFor(m => m.JsonData)').val();
            if (jsonString.length > 0) {
                let jsonData = JSON.parse(jsonString);
                $("#options").val(jsonData.option);
                optionSelected();
                if (jsonData.text)
                    $("#textbox").val(jsonData.text);
                else if (jsonData.number)
                    $("#textbox").val(jsonData.number);
                else if (jsonData.date)
                    $("#textbox").val(jsonData.date);
                else if (jsonData.radiobutton)
                    $("#radiobuttons").val(jsonData.radiobutton);
                else if (jsonData.checkboxes)
                    $("#checkboxes input").each(function () {
                        if (jsonData.checkboxes.includes($(this).val()))
                            $(this).prop('checked', true);
                    });
                else if (jsonData.imageAreas) {
                    // Workaround. Wait a bit until the image is loaded before drawing areas.
                    setTimeout(() => $("#image").selectAreas('add', jsonData.imageAreas.map(getAbsoluteArea)), 100)
                }
                let gotoVal = $('#@Html.IdFor(m => m.GoToQuestionId)').val();
                $("#goto").val(gotoVal.length == 0 ? 0 : gotoVal);
            }

            var targetNode = document.getElementById('inputs');
            var observer = new MutationObserver(() => {
                if (targetNode.style.display != 'none')
                    $('#image').selectAreas({
                        minSize: [30, 30]
                    });
            });
            observer.observe(targetNode, { attributes: true, childList: true });
        });

        let optionSelected = () => {
            if ($("#options").val().indexOf('is anything') == 0)
                $("#inputs").hide();
            else
                $("#inputs").show();
        };

        let getAbsoluteArea = (area) => {
            let currentWidth = $("#image").width();
            let currentHeight = $("#image").height();
            return {
                x: area.start.x * currentWidth,
                y: area.start.y * currentHeight,
                width: (area.end.x - area.start.x) * currentWidth,
                height: (area.end.y - area.start.y) * currentHeight,
            };
        };

        let getRelativeArea = (area) => {
            let currentWidth = $("#image").width();
            let currentHeight = $("#image").height();
            return {
                start: {
                    x: area.x / currentWidth,
                    y: area.y / currentHeight
                },
                end: {
                    x: (area.x + area.width) / currentWidth,
                    y: (area.y + area.height) / currentHeight
                }
            };
        };

        let submitClicked = async () => {
            let jsonData = {};
            let isValidForm = true;

            jsonData.option = $("#options").val();
            if (jsonData.option != "is anything") {
                let text = $("#textbox").val();
                switch (answerType) {
                    case '@QuestionType.Text.ToString()':
                        if (text.length == 0) {
                            isValidForm = false;
                            alert("Textbox cannot be empty.");
                        }
                        else
                            jsonData.text = text;
                        break;
                    case '@QuestionType.Number.ToString()':
                        if (text.length == 0 || isNaN(text)) {
                            isValidForm = false;
                            alert("Invalid number.");
                        }
                        else
                            jsonData.number = text;
                        break;
                    case '@QuestionType.Date.ToString()':
                        if ((new Date(text) === "Invalid Date") || isNaN(new Date(text))) {
                            isValidForm = false;
                            alert("Invalid date.");
                        }
                        else
                            jsonData.date = text;
                        break;
                    case '@QuestionType.Checkboxes.ToString()':
                        jsonData.checkboxes = [];
                        $("#checkboxes :checked").each(function () {
                            jsonData.checkboxes.push($(this).val());
                        });
                        if (jsonData.checkboxes.length == 0) {
                            isValidForm = false;
                            alert("At least one checkbox must be checked.");
                        }
                        break;
                    case '@QuestionType.Radiobuttons.ToString()':
                        jsonData.radiobutton = $("#radiobuttons").val();
                        if (jsonData.radiobutton.length == 0) {
                            isValidForm = false;
                            alert("Invalid radiobutton value.");
                        }
                        break;
                    case '@QuestionType.Image.ToString()':
                        jsonData.imageAreas = $('#image').selectAreas('areas').map(getRelativeArea);
                        if (jsonData.imageAreas.length == 0) {
                            isValidForm = false;
                            alert("At least one area must be selected.");
                        }
                        break;
                }
            }

            if (isValidForm) {
                $('#@Html.IdFor(m => m.GoToQuestionId)').val($("#goto").val());
                $('#@Html.IdFor(m => m.JsonData)').val(jQuery.isEmptyObject(jsonData) ? "" : JSON.stringify(jsonData));
                $('#create-button').closest("form").submit();
            }
        };
    </script>
}
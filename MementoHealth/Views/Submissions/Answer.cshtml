@model AnswerViewModel
@{
    ViewBag.Title = "Answer";
    ViewBag.PatientId = Model.Patient.PatientId;

    bool isLast = Model.NumberOfRemainingQuestions == 1;
    string remainingQuestionsText;
    if (isLast)
    {
        remainingQuestionsText = "Last question";
    }
    else if (Model.NumberOfRemainingQuestions == 2)
    {
        remainingQuestionsText = "One more question or fewer remain.";
    }
    else
    {
        remainingQuestionsText = Model.NumberOfRemainingQuestions + " questions or fewer remain.";
    }
}

<div class="shadow bg-light container pb-5 pt-4 mb-5" style="border-radius: 12px">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(m => m.SubmissionId)
        @Html.HiddenFor(m => m.Question.JsonData)
        @Html.HiddenFor(m => m.QuestionId)
        @Html.HiddenFor(m => m.JsonData)
        @Html.HiddenFor(m => m.NextAction)

        <div class="text-center py-3">@Html.Partial("_PatientDetailsPartial", Model.Patient)</div>
        <div class="progress ml-3 mr-3" style="height: 36px;">
            <div class="progress-bar" role="progressbar" style="width: @Model.GetProgress()%; background-color:#5466af"><b>@Model.GetProgress()%</b></div>
        </div>
        <div class="text-center mt-2 mb-1">@remainingQuestionsText</div>
        <hr />

        <h2 class="pl-3">@Model.Question.Question</h2>

        if (Model.Question.IsRequired)
        {
            <div class="text-danger pb-3 ml-3">Answer is required.</div>
        }

        <div class="row vw-100" style="display: flex">
            <input class="form-control" id="textbox" style="display:none; margin-left: 30px" autocomplete="off" oninput="onInput()">
            <div class="form-check pl-3 ml-5" id="radiobuttons" style="display: none; font-size: x-large"></div>
            <div class="form-check pl-3 ml-5" id="checkboxes" style="display: none; font-size: x-large"></div>
            <div id="img-wrapper">
                <img id="image" class="img-fluid" style="display:none;" onclick="imgClicked(event)" />
            </div>
        </div>

        <div class="row mt-5 mx-1">
            <div class="col-3 text-left">
                <button style="display:none;" type="button" id="clear-button" class="btn btn-lg btn-danger" onclick="clearAnswer()">
                    <i class="fa fa-lg fa-eraser"></i>
                    Clear Answer
                </button>
            </div>
            <div class="col-6 text-center">
                <div class="btn-group" role="group" aria-label="Basic example">
                    @if (Model.Question.Number != 1)
                    {
                        <button type="button" id="previous-button" class="btn btn-lg btn-outline-primary" onclick="submitClicked('previous')">
                            <i class="fa fa-lg fa-chevron-left"></i>
                            Previous Question
                        </button>
                    }
                    @if (isLast)
                    {
                        <button type="button" id="next-button" class="btn btn-lg btn-success" onclick="submitClicked('next')">
                            Review Answers
                            <i class="fa fa-lg fa-@(isLast ? "list" : "chevron-right")"></i>
                        </button>
                    }
                    else { 
                <button type="button" id="next-button" class="btn btn-lg btn-primary" onclick="submitClicked('next')">
                    Next Question
                    <i class="fa fa-lg fa-@(isLast ? "list" : "chevron-right")"></i>
                </button>
                    }
                </div>
            </div>
            <div class="col-3 text-right">
                @if (!isLast && Model.AnsweredAllQuestions)
                {
                    <button type="button" id="review-button" class="btn btn-lg btn-success" onclick="submitClicked('review')">
                        Review Answers
                        <i class="fa fa-lg fa-list"></i>
                    </button>
                }
            </div>
        </div>
    }
</div>

@section styles
{
    <style>
        input[type=checkbox], input[type=radio] {
            transform: scale(2.5);
            margin-top: 12px;
        }

        @@media only screen and (max-width: 575px) {

            #previous-button {
                font-size: 15px !important;
                padding: 5px 2px;
            }

            #next-button {
                font-size: 15px !important;
                padding: 5px 2px;
            }

            #review-button {
                margin-right: -17px !important;
                font-size: 15px !important;
                padding: 5px 2px;
            }

            #clear-button {
                font-size: 15px !important;
                padding: 5px 2px;
            }
        }

        div.shadow.bg-light {
            margin-top: 3vh;
        }
    </style>
}

@section scripts
{
    <script>
        let answerType = '@Model.Question.TypeString';
        let lastImageClick = {};

        $(() => {
            let answerData = {};

            if ($("#Question_JsonData").val().length > 0)
                questionData = JSON.parse($("#Question_JsonData").val());

            if ($("#JsonData").val().length > 0)
                answerData = JSON.parse($("#JsonData").val());

            switch (answerType) {
                case '@QuestionType.Text.ToString()':
                    $("#textbox").attr('type', 'text').show().val(answerData?.answer);
                    break;
                case '@QuestionType.Number.ToString()':
                    $("#textbox").attr('type', 'number').show().val(answerData?.answer);
                    break;
                case '@QuestionType.Date.ToString()':
                    $("#textbox").attr('type', 'date').show().val(answerData?.answer);
                    break;
                case '@QuestionType.Checkboxes.ToString()':
                    $('#checkboxes').show();
                    $.each(questionData.labels, function (i, label) {
                        $('#checkboxes').append(
                            $('<input>').prop({
                                type: 'checkbox',
                                id: 'checkbox-' + i,
                                class: 'form-check-input',
                                value: label
                            }).on('click', onInput)).append(
                            $('<label>').prop({
                                for: 'checkbox-' + i,
                                class: 'form-check-label mb-3 ml-4'
                            }).html(" " + label)
                            ).append($('<br>'));
                    });
                    if (answerData.answer)
                        $("#checkboxes input").each(function () {
                            if (answerData.answer.includes($(this).val()))
                                $(this).prop('checked', true);
                        });
                    break;
                case '@QuestionType.Radiobuttons.ToString()':
                    $('#radiobuttons').show();
                    $.each(questionData.labels, function (i, label) {
                        $('#radiobuttons').append(
                            $('<input>').prop({
                                type: 'radio',
                                id: 'radio-' + i,
                                name: 'radiobuttons',
                                class: 'form-check-input',
                                value: label
                            }).on('click', onInput)).append(
                                $('<label>').prop({
                                    for: 'radio-' + i,
                                    class: 'form-check-label mb-3 ml-3'
                                }).html(" " + label)
                            ).append($('<br>'));
                    });
                    if (answerData.answer)
                        $("#radiobuttons input").each(function () {
                            if (answerData.answer.includes($(this).val()))
                                $(this).prop('checked', true);
                        });
                    break;
                case '@QuestionType.Image.ToString()':
                    $('#image').show().attr('src', questionData.image.url)
                        .on('load', () => {
                            if (answerData.answer) {
                                lastImageClick = answerData.answer;
                                drawPointOnImage();
                            }
                        });
                    break;
            }
            onInput();

            $(window).keydown(function (event) {
                if (event.keyCode == 13) {
                    event.preventDefault();
                    return false;
                }
            });
        });

        let onInput = () => {
            let showClear = false;
            showClear = $("#textbox").val().length != 0 || lastImageClick.x;

            $("#checkboxes input").each(function () {
                if ($(this).prop('checked')) {
                    showClear = true;
                }
            });
            $("#radiobuttons input").each(function () {
                if ($(this).prop('checked')) {
                    showClear = true;
                }
            });

            if (showClear)
                $("#clear-button").show();
        };

        let clearAnswer = () => {
            $("#textbox").val("");
            $("#checkboxes input").each(function () {
                $(this).prop('checked', false);
            });
            $("#radiobuttons input").each(function () {
                $(this).prop('checked', false);
            });
            lastImageClick = {};
            $('.img-point').remove();
            $("#clear-button").hide();
        };

        let doit;
        window.onresize = () => {
            if (lastImageClick) {
                clearTimeout(doit);
                doit = setTimeout(drawPointOnImage, 100);
            }
        };

        let imgClicked = (event) => {
            const x = (event.pageX - $("#image").offset().left);
            const y = (event.pageY - $("#image").offset().top);
            lastImageClick.x = x / $("#image").width();
            lastImageClick.y = y / $("#image").height();
            drawPointOnImage();
        };

        let drawPointOnImage = () => {
            if (lastImageClick.x) {
                $('.img-point').remove();
                let img = $('#img-wrapper');
                let point = $('<div class="img-point"></div>');

                let x = lastImageClick.x * $("#image").width();
                let y = lastImageClick.y * $("#image").height();
                point.css({
                    left: x + "px",
                    top: y + "px"
                });
                point.appendTo(img);
            }
            onInput();
        }

        let submitClicked = async (nextAction) => {
            let jsonData = {};
            let isValidForm = true;
            let isRequired = @Model.Question.IsRequired.ToString().ToLower();
            let text = $("#textbox").val();

            switch (answerType) {
                case '@QuestionType.Text.ToString()':
                    if (isRequired && text.length == 0) {
                        isValidForm = false;
                        alert("Textbox cannot be empty.");
                    }
                    else
                        jsonData.answer = text;
                    break;
                case '@QuestionType.Number.ToString()':
                    if (isRequired && (text.length == 0 || isNaN(text))) {
                        isValidForm = false;
                        alert("Invalid number.");
                    }
                    else
                        jsonData.answer = text;
                    break;
                case '@QuestionType.Date.ToString()':
                    if (isRequired && ((new Date(text) === "Invalid Date") || isNaN(new Date(text)))) {
                        isValidForm = false;
                        alert("Invalid date.");
                    }
                    else
                        jsonData.answer = text;
                    break;
                case '@QuestionType.Checkboxes.ToString()':
                    jsonData.answer = [];
                    $("#checkboxes :checked").each(function () {
                        jsonData.answer.push($(this).val());
                    });
                    if (isRequired && jsonData.answer.length == 0) {
                        isValidForm = false;
                        alert("At least one checkbox must be checked.");
                    }
                    break;
                case '@QuestionType.Radiobuttons.ToString()':
                    jsonData.answer = $("#radiobuttons :checked").val() ?? "";
                    if (isRequired && jsonData.answer.length == 0) {
                        isValidForm = false;
                        alert("Invalid radiobutton value.");
                    }
                    break;
                case '@QuestionType.Image.ToString()':
                    jsonData.answer = lastImageClick;
                    if (isRequired && (!lastImageClick.x || !lastImageClick.y)) {
                        isValidForm = false;
                        alert("At least one area must be selected.");
                    }
                    break;
            }

            if (isValidForm) {
                $('#@Html.IdFor(m => m.JsonData)').val(jQuery.isEmptyObject(jsonData) ? "" : JSON.stringify(jsonData));
                $('#@Html.IdFor(m => m.NextAction)').val(nextAction);
                $('#next-button').closest("form").submit();
            }
        };
    </script>
}